!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
Camera	camera.h	/^		Camera(int x = 512, int y = 512):x_(x), y_(y) { }$/;"	f	class:Zebra::Camera
Camera	camera.h	/^class Camera$/;"	c	namespace:Zebra
RasterToIndex	camera.h	/^		int RasterToIndex(int x, int y) const { return y * x_ + x; }$/;"	f	class:Zebra::Camera
RasterToWorld	camera.h	/^		Vector RasterToWorld(double x, double y) const {$/;"	f	class:Zebra::Camera
Zebra	camera.h	/^namespace Zebra {$/;"	n
_CAMERA_H_	camera.h	9;"	d
x_	camera.h	/^		const int x_;$/;"	m	class:Zebra::Camera
y_	camera.h	/^		const int y_;$/;"	m	class:Zebra::Camera
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
Integrator	integrator.h	/^		Integrator():pixels_(new Spectrum[camera_.x_ * camera_.y_]) { }$/;"	f	class:Zebra::Integrator
Integrator	integrator.h	/^class Integrator$/;"	c	namespace:Zebra
WritePPM	integrator.h	/^		std::string WritePPM() const {$/;"	f	class:Zebra::Integrator
Zebra	integrator.h	/^namespace Zebra {$/;"	n
_INTEGRATOR_H_	integrator.h	9;"	d
camera_	integrator.h	/^		Camera  camera_;$/;"	m	class:Zebra::Integrator
pixels_	integrator.h	/^		Vector *pixels_;$/;"	m	class:Zebra::Integrator
rng_	integrator.h	/^		RNG     rng_;$/;"	m	class:Zebra::Integrator
~Integrator	integrator.h	/^		virtual ~Integrator() { }$/;"	f	class:Zebra::Integrator
Interaction	interaction.h	/^		Interaction() { }$/;"	f	class:Zebra::Interaction
Interaction	interaction.h	/^		Interaction(const Point &p, const Vector &n, const Object *o):p_(p), n_(n), o_(o) { }$/;"	f	class:Zebra::Interaction
Interaction	interaction.h	/^class Interaction$/;"	c	namespace:Zebra
Zebra	interaction.h	/^namespace Zebra {$/;"	n
_INTERACTION_H_	interaction.h	9;"	d
n_	interaction.h	/^		Vector        n_;$/;"	m	class:Zebra::Interaction
o_	interaction.h	/^		const Object *o_;$/;"	m	class:Zebra::Interaction
p_	interaction.h	/^		Point         p_;$/;"	m	class:Zebra::Interaction
BSDF	object.h	/^enum BSDF { Diffuse, Reflect, Refract };$/;"	g	namespace:Zebra
Diffuse	object.h	/^enum BSDF { Diffuse, Reflect, Refract };$/;"	e	enum:Zebra::BSDF
Object	object.h	/^		Object(BSDF t, const Spectrum &e, const Spectrum &c):t_(t), e_(e), c_(c) { }$/;"	f	class:Zebra::Object
Object	object.h	/^class Object$/;"	c	namespace:Zebra
PI	object.h	/^const double PI = 3.141592653589793238;$/;"	v
Reflect	object.h	/^enum BSDF { Diffuse, Reflect, Refract };$/;"	e	enum:Zebra::BSDF
Refract	object.h	/^enum BSDF { Diffuse, Reflect, Refract };$/;"	e	enum:Zebra::BSDF
SampleF	object.h	/^		Vector SampleF(const Vector &d, const Vector &n, const Vector2 &u) const {$/;"	f	class:Zebra::Object
Sphere	object.h	/^		Sphere(BSDF t, const Point &p, double r, const Spectrum &e, const Spectrum &c)$/;"	f	class:Zebra::Sphere
Sphere	object.h	/^class Sphere : public Object$/;"	c	namespace:Zebra
Zebra	object.h	/^namespace Zebra {$/;"	n
_OBJECT_H_	object.h	9;"	d
c_	object.h	/^		Spectrum c_;$/;"	m	class:Zebra::Object
e_	object.h	/^		Spectrum e_;$/;"	m	class:Zebra::Object
p_	object.h	/^		Point    p_;$/;"	m	class:Zebra::Sphere
r_	object.h	/^		double   r_;$/;"	m	class:Zebra::Sphere
t_	object.h	/^		BSDF     t_;$/;"	m	class:Zebra::Object
~Object	object.h	/^		virtual ~Object() { }$/;"	f	class:Zebra::Object
Parser	parser.h	/^		Parser(const char *file) {$/;"	f	class:Zebra::Parser
Parser	parser.h	/^class Parser$/;"	c	namespace:Zebra
Scene	parser.h	/^		const std::vector<Object *>& Scene() const { return scene_; }$/;"	f	class:Zebra::Parser
Zebra	parser.h	/^namespace Zebra {$/;"	n
_PARSER_H_	parser.h	9;"	d
scene_	parser.h	/^		std::vector<Object *> scene_;$/;"	m	class:Zebra::Parser
~Parser	parser.h	/^		~Parser() {$/;"	f	class:Zebra::Parser
Li	path_tracer.h	/^		Spectrum Li(const std::vector<Object *> &scene, Ray ray, int depth) {$/;"	f	class:Zebra::PathTracer
PathTracer	path_tracer.h	/^		PathTracer(int samples):samples_(samples) { }$/;"	f	class:Zebra::PathTracer
PathTracer	path_tracer.h	/^class PathTracer : public Integrator$/;"	c	namespace:Zebra
Render	path_tracer.h	/^		std::string Render(const std::vector<Object *> &scene) {$/;"	f	class:Zebra::PathTracer
Zebra	path_tracer.h	/^namespace Zebra {$/;"	n
_PATH_TRACER_H_	path_tracer.h	9;"	d
samples_	path_tracer.h	/^		const int samples_;$/;"	m	class:Zebra::PathTracer
Ray	ray.h	/^		Ray(const Point &o, const Vector &d, double m = 1e10):o_(o), d_(d), m_(m) { }$/;"	f	class:Zebra::Ray
Ray	ray.h	/^class Ray$/;"	c	namespace:Zebra
Zebra	ray.h	/^namespace Zebra {$/;"	n
_RAY_H_	ray.h	9;"	d
d_	ray.h	/^		Vector d_;$/;"	m	class:Zebra::Ray
m_	ray.h	/^		double m_;$/;"	m	class:Zebra::Ray
o_	ray.h	/^		Point  o_;$/;"	m	class:Zebra::Ray
Get1	rng.h	/^		double Get1() {$/;"	f	class:Zebra::RNG
Get2	rng.h	/^		Vector2 Get2() {$/;"	f	class:Zebra::RNG
RNG	rng.h	/^		RNG():generator_(time(0)), distribution_(0, 1) { }$/;"	f	class:Zebra::RNG
RNG	rng.h	/^class RNG$/;"	c	namespace:Zebra
Zebra	rng.h	/^namespace Zebra {$/;"	n
_RNG_H_	rng.h	9;"	d
distribution_	rng.h	/^		std::uniform_real_distribution<double> distribution_;$/;"	m	class:Zebra::RNG
generator_	rng.h	/^		std::default_random_engine generator_;$/;"	m	class:Zebra::RNG
Cross	vector.h	/^inline Vector Cross(const Vector &lhs, const Vector &rhs) {$/;"	f	namespace:Zebra
Dot	vector.h	/^inline double Dot(const Vector &lhs, const Vector &rhs) {$/;"	f	namespace:Zebra
Length	vector.h	/^		double Length() const {$/;"	f	class:Zebra::Vector
Length2	vector.h	/^		double Length2() const {$/;"	f	class:Zebra::Vector
Normalize	vector.h	/^inline Vector Normalize(const Vector &v) {$/;"	f	namespace:Zebra
Point	vector.h	/^typedef Vector Point;$/;"	t	namespace:Zebra
Spectrum	vector.h	/^typedef Vector Spectrum;$/;"	t	namespace:Zebra
Vector	vector.h	/^		Vector():x_(0), y_(0), z_(0) { }$/;"	f	class:Zebra::Vector
Vector	vector.h	/^		Vector(double v):x_(v), y_(v), z_(v) { }$/;"	f	class:Zebra::Vector
Vector	vector.h	/^		Vector(double x, double y, double z):x_(x), y_(y), z_(z) { }$/;"	f	class:Zebra::Vector
Vector	vector.h	/^class Vector$/;"	c	namespace:Zebra
Vector2	vector.h	/^		Vector2(double x, double y):x_(x), y_(y) { }$/;"	f	class:Zebra::Vector2
Vector2	vector.h	/^class Vector2$/;"	c	namespace:Zebra
Zebra	vector.h	/^namespace Zebra {$/;"	n
_VECTOR_H_	vector.h	9;"	d
operator !=	vector.h	/^		bool operator!=(const Vector &that) const {$/;"	f	class:Zebra::Vector
operator *	vector.h	/^		Vector operator*(const Vector &that) const {$/;"	f	class:Zebra::Vector
operator *	vector.h	/^		Vector operator*(double v) const {$/;"	f	class:Zebra::Vector
operator *=	vector.h	/^		Vector& operator*=(const Vector &that) {$/;"	f	class:Zebra::Vector
operator *=	vector.h	/^		Vector& operator*=(double v) {$/;"	f	class:Zebra::Vector
operator +	vector.h	/^		Vector operator+(const Vector &that) const {$/;"	f	class:Zebra::Vector
operator +=	vector.h	/^		Vector& operator+=(const Vector &that) {$/;"	f	class:Zebra::Vector
operator -	vector.h	/^		Vector operator-() const { return Vector(-x_, -y_, -z_); }$/;"	f	class:Zebra::Vector
operator -	vector.h	/^		Vector operator-(const Vector &that) const {$/;"	f	class:Zebra::Vector
operator -=	vector.h	/^		Vector& operator-=(const Vector &that) {$/;"	f	class:Zebra::Vector
operator /	vector.h	/^		Vector operator\/(double v) const {$/;"	f	class:Zebra::Vector
operator /=	vector.h	/^		Vector operator\/=(double v) {$/;"	f	class:Zebra::Vector
operator ==	vector.h	/^		bool operator==(const Vector &that) const {$/;"	f	class:Zebra::Vector
x_	vector.h	/^		double x_, y_, z_;$/;"	m	class:Zebra::Vector
x_	vector.h	/^		double x_, y_;$/;"	m	class:Zebra::Vector2
y_	vector.h	/^		double x_, y_, z_;$/;"	m	class:Zebra::Vector
y_	vector.h	/^		double x_, y_;$/;"	m	class:Zebra::Vector2
z_	vector.h	/^		double x_, y_, z_;$/;"	m	class:Zebra::Vector
main	zebra.cpp	/^int main(int argc, char **argv)$/;"	f
